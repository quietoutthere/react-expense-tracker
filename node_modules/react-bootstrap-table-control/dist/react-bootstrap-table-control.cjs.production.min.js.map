{"version":3,"file":"react-bootstrap-table-control.cjs.production.min.js","sources":["../src/TotalItems.tsx","../src/TableBodyControl.tsx","../src/SortDirection.tsx","../src/TableHeadControl.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react'\n\nimport { Placeholder } from 'react-bootstrap';\n\ntype TotalItemsProps = {\n  total: number,\n  isLoading?: boolean\n}\n\nexport const TotalItems = ({ total, isLoading = false }: TotalItemsProps) => {\n\n  return <>\n    <div style={{ marginRight: '5px' }}><b>Total:</b></div>\n    {\n      !isLoading\n        ? <div>{total}</div>\n        : <Placeholder as=\"div\" style={{ minWidth: '40px' }} animation=\"glow\">\n          <Placeholder xs={12} />\n        </Placeholder>\n    }\n  </>\n}\n","import React from 'react'\n\nimport { Header } from './TableHeadControl'\n\nexport type Td = {\n  value: any,\n  tdProps?: object\n}\n\nexport type Item = any\n  & {\n    trType?: \"default\" | \"blocked\" | \"clickable\",\n    trProps?: object\n    [key: string]: Td | any;\n  }\n\nexport type TableBodyControlProps = {\n  // Header\n  header: Header[],\n  // Body\n  itens: Item[],\n  emptyMessage?: JSX.Element | string,\n  clickable?: boolean,\n  onClickItem?: (item: Item) => any,\n  fillEmptyColumn?: boolean,\n  // Properties\n  tbodyProps?: object,\n}\n\nexport const TableBodyControl = ({\n  header,\n  itens,\n  emptyMessage = \"No results\",\n  clickable = false,\n  onClickItem = item => console.log(item),\n  fillEmptyColumn = true,\n  tbodyProps = {}\n}: TableBodyControlProps) => {\n\n  return <tbody {...tbodyProps}>\n    {\n      itens.length > 0\n        // Exist result\n        ? (\n          itens.map((item_value, item_index) => {\n            // Line\n            return <tr key={item_index}\n              // Clickable style\n              style={\n                clickable\n                  ? (\n                    item_value.trType === 'blocked'\n                      ? { cursor: 'not-allowed' }\n                      : { cursor: 'pointer' }\n                  )\n                  : { cursor: 'default' }\n              }\n              // Clickable action\n              onClick={() => (\n                clickable && item_value.trType !== 'blocked'\n                  ? onClickItem(item_value)\n                  : false\n              )}\n              {...(item_value?.trProps ? item_value.trProps : {})}\n            >\n              {header.map((header_item, header_index) => {\n                // Blocked style\n                return fillEmptyColumn || item_value[header_item.key]\n                  ? <td key={header_index}\n                    style={\n                      item_value.trType === 'blocked'\n                        ? { color: '#bbb' }\n                        : {}\n                    }\n                    {...(\n                      typeof item_value[header_item.key] === 'object' && item_value[header_item.key]?.tdProps\n                        ? item_value[header_item.key]?.tdProps\n                        : {}\n                    )}\n                  >\n                    {\n                      typeof item_value[header_item.key] === 'object' && item_value[header_item.key].value\n                        ? item_value[header_item.key].value\n                        : item_value[header_item.key]\n                    }\n                  </td>\n                  : null\n              })}\n            </tr>\n          })\n        )\n        // Empty result\n        : <tr>\n          <td colSpan={header.length}>{emptyMessage}</td>\n        </tr>\n    }\n  </tbody>\n}\n","import React from 'react'\nimport { BsFillCaretDownFill, BsFillCaretUpFill } from \"react-icons/bs\";\n\nimport { Sort } from './TableHeadControl';\n\ntype SortDirectionProps = {\n  column: string,\n  sort: Sort\n}\n\nexport const SortDirection = ({ column, sort }: SortDirectionProps) => {\n\n  return (\n    sort && sort.column === column\n      ? (\n        sort.direction === \"ASC\"\n          ? <BsFillCaretDownFill />\n          : (\n            sort.direction === \"DESC\"\n              ? <BsFillCaretUpFill />\n              : <></>\n          )\n      )\n      : <></>\n  )\n}\n","import React from 'react'\n\nimport { SortDirection } from './SortDirection';\n\nexport type Sort = {\n  column: string,\n  direction?: \"ASC\" | \"DESC\"\n}\n\nexport type Header = {\n  name: JSX.Element | string,\n  key: string,\n  sort?: boolean,\n  thProps?: object\n}\n\nexport type TableHeadControlProps = {\n  // Header\n  header: Header[],\n  sortable?: boolean,\n  onClickHeader?: (sort: Sort) => any,\n  sort?: Sort,\n  // Properties\n  theadProps?: object,\n  trProps?: object,\n}\n\nexport const TableHeadControl = ({\n  header,\n  sortable = false,\n  onClickHeader = sort => console.log(sort),\n  sort = { column: 'id', direction: \"ASC\" },\n  theadProps = {},\n  trProps = {}\n}: TableHeadControlProps) => {\n\n  return <thead {...theadProps}>\n    <tr {...trProps}>\n      {/* Map all th headers */}\n      {header.map((header_item, header_index) => {\n        return <th key={header_index}\n          // Sort style\n          style={{\n            whiteSpace: 'nowrap',\n            cursor: sortable\n              ? (\n                header_item.sort === false\n                  ? 'not-allowed'\n                  : 'pointer'\n              )\n              : 'default'\n          }}\n          // Sort action\n          onClick={() => (\n            !sortable || header_item.sort === false\n              ? false\n              : onClickHeader(\n                sort.column === header_item.key && sort?.direction\n                  ? { column: header_item.key, direction: sort.direction }\n                  : { column: header_item.key }\n              )\n          )}\n          {...header_item.thProps}\n        >\n          {/* Item name and sort direction */}\n          {header_item.name} {sortable && <SortDirection column={header_item.key} sort={sort} />}\n        </th>\n      })}\n    </tr>\n  </thead>\n}\n","import React from 'react'\nimport { Col, Row, Table as RBTable } from 'react-bootstrap';\n\nimport { TableLoading } from 'react-bootstrap-table-loading';\nimport { PaginationControl } from 'react-bootstrap-pagination-control';\n\nimport { TotalItems } from './TotalItems';\nimport { TableBodyControl, TableBodyControlProps } from './TableBodyControl';\nimport { TableHeadControl, TableHeadControlProps } from './TableHeadControl';\n\nexport type TableControlProps = TableHeadControlProps\n  & TableBodyControlProps\n  & {\n    // Total\n    total?: number,\n    totalPosition?: \"both\" | \"top\" | \"bottom\" | \"none\",\n    // Pagination\n    pagination?: boolean,\n    page?: number,\n    limit?: number,\n    between?: number,\n    ellipsis?: number,\n    next?: boolean,\n    last?: boolean,\n    onClickPage?: (page: number) => any,\n    // Loading\n    isLoading?: boolean,\n    loadingLines?: number,\n    // Properties\n    tableProps?: object\n  }\n\nexport const TableControl = ({\n  header,\n  sortable = false,\n  onClickHeader = sort => console.log(sort),\n  sort = { column: 'id', direction: \"ASC\" },\n  itens,\n  emptyMessage = \"No results\",\n  clickable = false,\n  onClickItem = item => console.log(item),\n  fillEmptyColumn = true,\n  total = 0,\n  totalPosition = \"both\",\n  pagination = true,\n  page = 1,\n  limit = 25,\n  between = 4,\n  ellipsis = 1,\n  next = true,\n  last = false,\n  onClickPage = page => console.log(page),\n  isLoading = false,\n  loadingLines = limit,\n  tableProps = {},\n  theadProps = {},\n  trProps = {},\n  tbodyProps = {}\n}: TableControlProps) => {\n\n  total = total < itens?.length ? itens.length : total\n  limit = limit < itens?.length ? itens?.length : limit\n\n  return <>\n    {/* Total itens on top */}\n    {\n      (totalPosition === \"both\" || totalPosition === \"top\") &&\n      <Row>\n        <Col md={12}\n          className=\"mb-3\"\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexShrink: 0,\n            alignItems: 'center',\n            justifyContent: 'flex-end'\n          }}>\n          <TotalItems total={total} isLoading={isLoading} />\n        </Col>\n      </Row>\n    }\n\n    {/* Table */}\n    <Row>\n      <Col md={12}>\n        <RBTable {...tableProps}>\n\n          {/* Table head */}\n          <TableHeadControl\n            header={header}\n            sortable={sortable}\n            onClickHeader={onClickHeader}\n            sort={sort}\n            theadProps={theadProps}\n            trProps={trProps}\n          />\n\n          {/* Table body */}\n          {\n            !isLoading\n              // Content\n              ? <TableBodyControl\n                header={header}\n                itens={itens}\n                emptyMessage={emptyMessage}\n                clickable={clickable}\n                onClickItem={onClickItem}\n                fillEmptyColumn={fillEmptyColumn}\n                tbodyProps={tbodyProps}\n              />\n              // Loading\n              : <TableLoading\n                lines={loadingLines}\n                columns={\n                  header.map(() => {\n                    return { min: 3, max: 8 }\n                  })\n                }\n                tbodyProps={tbodyProps}\n              />\n          }\n        </RBTable>\n      </Col>\n    </Row>\n\n    {/* Total itens on bottom */}\n    {\n      (totalPosition === \"both\" || totalPosition === \"bottom\") &&\n      <Row>\n        <Col md={12}\n          className=\"mb-3\"\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexShrink: 0,\n            alignItems: 'center',\n            justifyContent: 'flex-end'\n          }}>\n          <TotalItems total={total} isLoading={isLoading} />\n        </Col>\n      </Row>\n    }\n\n    {/* Pagination */}\n    {\n      (!isLoading && pagination) &&\n      <Row>\n        <Col md={12}>\n          <PaginationControl page={page} total={total} limit={limit} between={between} ellipsis={ellipsis} next={next} last={last} changePage={(page: number) => onClickPage(page)} />\n        </Col>\n      </Row>\n    }\n  </>\n}\n"],"names":["TotalItems","total","_ref$isLoading","isLoading","React","style","marginRight","Placeholder","as","minWidth","animation","xs","TableBodyControl","header","itens","_ref$emptyMessage","emptyMessage","_ref$clickable","clickable","_ref$onClickItem","onClickItem","item","console","log","_ref$fillEmptyColumn","fillEmptyColumn","_ref$tbodyProps","tbodyProps","length","map","item_value","item_index","key","trType","cursor","onClick","trProps","header_item","header_index","color","_item_value$header_it","tdProps","_item_value$header_it2","value","colSpan","SortDirection","sort","column","direction","BsFillCaretDownFill","BsFillCaretUpFill","TableHeadControl","_ref$sortable","sortable","_ref$onClickHeader","onClickHeader","_ref$sort","_ref$theadProps","theadProps","_ref$trProps","whiteSpace","thProps","name","_ref$total","_ref$totalPosition","totalPosition","_ref$pagination","pagination","_ref$page","page","_ref$limit","limit","_ref$between","between","_ref$ellipsis","ellipsis","_ref$next","next","_ref$last","last","_ref$onClickPage","onClickPage","_ref$loadingLines","loadingLines","_ref$tableProps","tableProps","Row","Col","md","className","display","flexWrap","flexShrink","alignItems","justifyContent","RBTable","TableLoading","lines","columns","min","max","PaginationControl","changePage"],"mappings":"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"}