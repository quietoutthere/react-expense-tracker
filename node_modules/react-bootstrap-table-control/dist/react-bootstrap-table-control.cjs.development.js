'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var reactBootstrap = require('react-bootstrap');
var reactBootstrapTableLoading = require('react-bootstrap-table-loading');
var reactBootstrapPaginationControl = require('react-bootstrap-pagination-control');
var bs = require('react-icons/bs');

var TotalItems = function TotalItems(_ref) {
  var total = _ref.total,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;
  return React.createElement(React.Fragment, null, React.createElement("div", {
    style: {
      marginRight: '5px'
    }
  }, React.createElement("b", null, "Total:")), !isLoading ? React.createElement("div", null, total) : React.createElement(reactBootstrap.Placeholder, {
    as: "div",
    style: {
      minWidth: '40px'
    },
    animation: "glow"
  }, React.createElement(reactBootstrap.Placeholder, {
    xs: 12
  })));
};

var TableBodyControl = function TableBodyControl(_ref) {
  var header = _ref.header,
    itens = _ref.itens,
    _ref$emptyMessage = _ref.emptyMessage,
    emptyMessage = _ref$emptyMessage === void 0 ? "No results" : _ref$emptyMessage,
    _ref$clickable = _ref.clickable,
    clickable = _ref$clickable === void 0 ? false : _ref$clickable,
    _ref$onClickItem = _ref.onClickItem,
    onClickItem = _ref$onClickItem === void 0 ? function (item) {
      return console.log(item);
    } : _ref$onClickItem,
    _ref$fillEmptyColumn = _ref.fillEmptyColumn,
    fillEmptyColumn = _ref$fillEmptyColumn === void 0 ? true : _ref$fillEmptyColumn,
    _ref$tbodyProps = _ref.tbodyProps,
    tbodyProps = _ref$tbodyProps === void 0 ? {} : _ref$tbodyProps;
  return React.createElement("tbody", Object.assign({}, tbodyProps), itens.length > 0
  // Exist result
  ? itens.map(function (item_value, item_index) {
    // Line
    return React.createElement("tr", Object.assign({
      key: item_index,
      // Clickable style
      style: clickable ? item_value.trType === 'blocked' ? {
        cursor: 'not-allowed'
      } : {
        cursor: 'pointer'
      } : {
        cursor: 'default'
      },
      // Clickable action
      onClick: function onClick() {
        return clickable && item_value.trType !== 'blocked' ? onClickItem(item_value) : false;
      }
    }, item_value != null && item_value.trProps ? item_value.trProps : {}), header.map(function (header_item, header_index) {
      var _item_value$header_it, _item_value$header_it2;
      // Blocked style
      return fillEmptyColumn || item_value[header_item.key] ? React.createElement("td", Object.assign({
        key: header_index,
        style: item_value.trType === 'blocked' ? {
          color: '#bbb'
        } : {}
      }, typeof item_value[header_item.key] === 'object' && (_item_value$header_it = item_value[header_item.key]) != null && _item_value$header_it.tdProps ? (_item_value$header_it2 = item_value[header_item.key]) == null ? void 0 : _item_value$header_it2.tdProps : {}), typeof item_value[header_item.key] === 'object' && item_value[header_item.key].value ? item_value[header_item.key].value : item_value[header_item.key]) : null;
    }));
  })
  // Empty result
  : React.createElement("tr", null, React.createElement("td", {
    colSpan: header.length
  }, emptyMessage)));
};

var SortDirection = function SortDirection(_ref) {
  var column = _ref.column,
    sort = _ref.sort;
  return sort && sort.column === column ? sort.direction === "ASC" ? React.createElement(bs.BsFillCaretDownFill, null) : sort.direction === "DESC" ? React.createElement(bs.BsFillCaretUpFill, null) : React.createElement(React.Fragment, null) : React.createElement(React.Fragment, null);
};

var TableHeadControl = function TableHeadControl(_ref) {
  var header = _ref.header,
    _ref$sortable = _ref.sortable,
    sortable = _ref$sortable === void 0 ? false : _ref$sortable,
    _ref$onClickHeader = _ref.onClickHeader,
    onClickHeader = _ref$onClickHeader === void 0 ? function (sort) {
      return console.log(sort);
    } : _ref$onClickHeader,
    _ref$sort = _ref.sort,
    sort = _ref$sort === void 0 ? {
      column: 'id',
      direction: "ASC"
    } : _ref$sort,
    _ref$theadProps = _ref.theadProps,
    theadProps = _ref$theadProps === void 0 ? {} : _ref$theadProps,
    _ref$trProps = _ref.trProps,
    trProps = _ref$trProps === void 0 ? {} : _ref$trProps;
  return React.createElement("thead", Object.assign({}, theadProps), React.createElement("tr", Object.assign({}, trProps), header.map(function (header_item, header_index) {
    return React.createElement("th", Object.assign({
      key: header_index,
      // Sort style
      style: {
        whiteSpace: 'nowrap',
        cursor: sortable ? header_item.sort === false ? 'not-allowed' : 'pointer' : 'default'
      },
      // Sort action
      onClick: function onClick() {
        return !sortable || header_item.sort === false ? false : onClickHeader(sort.column === header_item.key && sort != null && sort.direction ? {
          column: header_item.key,
          direction: sort.direction
        } : {
          column: header_item.key
        });
      }
    }, header_item.thProps), header_item.name, " ", sortable && React.createElement(SortDirection, {
      column: header_item.key,
      sort: sort
    }));
  })));
};

var TableControl = function TableControl(_ref) {
  var header = _ref.header,
    _ref$sortable = _ref.sortable,
    sortable = _ref$sortable === void 0 ? false : _ref$sortable,
    _ref$onClickHeader = _ref.onClickHeader,
    onClickHeader = _ref$onClickHeader === void 0 ? function (sort) {
      return console.log(sort);
    } : _ref$onClickHeader,
    _ref$sort = _ref.sort,
    sort = _ref$sort === void 0 ? {
      column: 'id',
      direction: "ASC"
    } : _ref$sort,
    itens = _ref.itens,
    _ref$emptyMessage = _ref.emptyMessage,
    emptyMessage = _ref$emptyMessage === void 0 ? "No results" : _ref$emptyMessage,
    _ref$clickable = _ref.clickable,
    clickable = _ref$clickable === void 0 ? false : _ref$clickable,
    _ref$onClickItem = _ref.onClickItem,
    onClickItem = _ref$onClickItem === void 0 ? function (item) {
      return console.log(item);
    } : _ref$onClickItem,
    _ref$fillEmptyColumn = _ref.fillEmptyColumn,
    fillEmptyColumn = _ref$fillEmptyColumn === void 0 ? true : _ref$fillEmptyColumn,
    _ref$total = _ref.total,
    total = _ref$total === void 0 ? 0 : _ref$total,
    _ref$totalPosition = _ref.totalPosition,
    totalPosition = _ref$totalPosition === void 0 ? "both" : _ref$totalPosition,
    _ref$pagination = _ref.pagination,
    pagination = _ref$pagination === void 0 ? true : _ref$pagination,
    _ref$page = _ref.page,
    page = _ref$page === void 0 ? 1 : _ref$page,
    _ref$limit = _ref.limit,
    limit = _ref$limit === void 0 ? 25 : _ref$limit,
    _ref$between = _ref.between,
    between = _ref$between === void 0 ? 4 : _ref$between,
    _ref$ellipsis = _ref.ellipsis,
    ellipsis = _ref$ellipsis === void 0 ? 1 : _ref$ellipsis,
    _ref$next = _ref.next,
    next = _ref$next === void 0 ? true : _ref$next,
    _ref$last = _ref.last,
    last = _ref$last === void 0 ? false : _ref$last,
    _ref$onClickPage = _ref.onClickPage,
    onClickPage = _ref$onClickPage === void 0 ? function (page) {
      return console.log(page);
    } : _ref$onClickPage,
    _ref$isLoading = _ref.isLoading,
    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
    _ref$loadingLines = _ref.loadingLines,
    loadingLines = _ref$loadingLines === void 0 ? limit : _ref$loadingLines,
    _ref$tableProps = _ref.tableProps,
    tableProps = _ref$tableProps === void 0 ? {} : _ref$tableProps,
    _ref$theadProps = _ref.theadProps,
    theadProps = _ref$theadProps === void 0 ? {} : _ref$theadProps,
    _ref$trProps = _ref.trProps,
    trProps = _ref$trProps === void 0 ? {} : _ref$trProps,
    _ref$tbodyProps = _ref.tbodyProps,
    tbodyProps = _ref$tbodyProps === void 0 ? {} : _ref$tbodyProps;
  total = total < (itens == null ? void 0 : itens.length) ? itens.length : total;
  limit = limit < (itens == null ? void 0 : itens.length) ? itens == null ? void 0 : itens.length : limit;
  return React.createElement(React.Fragment, null, (totalPosition === "both" || totalPosition === "top") && React.createElement(reactBootstrap.Row, null, React.createElement(reactBootstrap.Col, {
    md: 12,
    className: "mb-3",
    style: {
      display: 'flex',
      flexWrap: 'wrap',
      flexShrink: 0,
      alignItems: 'center',
      justifyContent: 'flex-end'
    }
  }, React.createElement(TotalItems, {
    total: total,
    isLoading: isLoading
  }))), React.createElement(reactBootstrap.Row, null, React.createElement(reactBootstrap.Col, {
    md: 12
  }, React.createElement(reactBootstrap.Table, Object.assign({}, tableProps), React.createElement(TableHeadControl, {
    header: header,
    sortable: sortable,
    onClickHeader: onClickHeader,
    sort: sort,
    theadProps: theadProps,
    trProps: trProps
  }), !isLoading
  // Content
  ? React.createElement(TableBodyControl, {
    header: header,
    itens: itens,
    emptyMessage: emptyMessage,
    clickable: clickable,
    onClickItem: onClickItem,
    fillEmptyColumn: fillEmptyColumn,
    tbodyProps: tbodyProps
  })
  // Loading
  : React.createElement(reactBootstrapTableLoading.TableLoading, {
    lines: loadingLines,
    columns: header.map(function () {
      return {
        min: 3,
        max: 8
      };
    }),
    tbodyProps: tbodyProps
  })))), (totalPosition === "both" || totalPosition === "bottom") && React.createElement(reactBootstrap.Row, null, React.createElement(reactBootstrap.Col, {
    md: 12,
    className: "mb-3",
    style: {
      display: 'flex',
      flexWrap: 'wrap',
      flexShrink: 0,
      alignItems: 'center',
      justifyContent: 'flex-end'
    }
  }, React.createElement(TotalItems, {
    total: total,
    isLoading: isLoading
  }))), !isLoading && pagination && React.createElement(reactBootstrap.Row, null, React.createElement(reactBootstrap.Col, {
    md: 12
  }, React.createElement(reactBootstrapPaginationControl.PaginationControl, {
    page: page,
    total: total,
    limit: limit,
    between: between,
    ellipsis: ellipsis,
    next: next,
    last: last,
    changePage: function changePage(page) {
      return onClickPage(page);
    }
  }))));
};

exports.TableControl = TableControl;
//# sourceMappingURL=react-bootstrap-table-control.cjs.development.js.map
